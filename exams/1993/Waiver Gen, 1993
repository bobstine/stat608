;;;;;;;;;;;;;  Waiver Generation, 1993;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;  Question #1  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;(def n 50)(def income (* 2 (gamma-rand n 25)))        ; first is length(def deduct (+ (* income .01) (* .1 (normal-rand n))))(def acct (mapcan #'(lambda (x) (binomial-rand 1 1 (/ (- x 20) 80)))                  income))(def acct*income (* acct income))(def acct*deduct (* acct deduct))(def dollars (+ 300 (*   1   income)                    (* 500   deduct)                    (* -150  acct)                    (* -10   acct*income)                (* 120 (normal-rand n))  ))(scatterplot-matrix (list income deduct acct acct*income acct*deduct dollars))(regression-model (list income deduct acct acct*income acct*deduct)                  dollars)(print-matrix (bind-columns dollars income deduct acct))     Dollars   Income   Deduct     Acct    (-156.317  51.5397  0.27842        1)    ( 538.081  49.2065 0.306391        0)    ( -188.14  64.8907 0.635657        1)    (  489.55  50.4901 0.482009        0)    (-220.533  58.1719 0.391131        1)    (-91.1928  58.8002 0.616047        1)    ( 699.323  61.0291 0.529903        0)    ( 733.653  58.3165 0.415291        0)    ( 768.813  59.9087 0.619591        0)    (-281.877  75.8864 0.723249        1)    ( 26.0373  47.0795 0.555807        1)    ( 395.361  27.8928 0.375257        0)    ( 531.499  37.6302 0.232303        0)    (-261.542  67.1849 0.615799        1)    ( 687.362  53.2411 0.646541        0)    ( 552.233   30.799 0.429167        0)    (-111.876  40.3693 0.411943        1)    ( -255.58   60.837 0.492414        1)    (  2.4234  60.8679 0.621768        1)    ( 533.412  48.0029 0.449862        0)    ( 530.054  44.8428 0.457544        0)    ( 195.571  48.2896 0.495699        1)    ( 537.246   36.225 0.260041        0)    (   619.4  50.0507 0.440806        0)    (-15.5032  45.9067 0.349591        1)    ( 51.1814  43.4248 0.455178        1)    ( 532.841  30.4461   0.2839        0)    ( 823.259  48.8446 0.439948        0)    (-8.64102  53.9296 0.707172        1)    (-97.4154  46.4712 0.256167        1)    ( 505.093  42.4827  0.51261        0)    ( 65.9808   50.568 0.461017        1)    (-7.47026  43.7096  0.64971        1)    ( 816.892  60.1414 0.612082        0)    (-327.464  85.1753 0.780466        1)    ( 654.723  47.2056 0.484987        0)    ( 554.773  28.2653 0.266039        0)    (-323.808  74.7556 0.639404        1)    ( 725.049  36.8293 0.341021        0)    (  142.59  36.7207  0.39272        1)    (-106.622  51.8249 0.344162        1)    (-60.0936  35.2626 0.397129        1)    (  458.38  34.3385 0.209268        0)    ( 771.489  36.8966 0.492787        0)    ( 562.566  49.2001 0.453711        0)    (  612.65  52.6635 0.598608        0)    ( 891.363  48.3451 0.635033        0)    ( 350.941  41.6967 0.185397        0)    ( 41.7731  65.5173 0.617025        1)    ( 592.066  57.2468 0.478552        0);;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;  Question #2  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;(def n 15)(def process1 (* .001 (+ 5 (normal-rand n))))(def process2 (* .001 (+ 5 (normal-rand n))))(def process3 (* .001 (+ 3.5 (gamma-rand n 1))))(print-matrix  (bind-columns                (combine process1 process2 process3)                (combine (repeat 1 n) (repeat 2 n) (repeat 3 n))))     Size         Process    (0.00463942          1)    (0.00528674          1)    (0.00497077          1)    (0.00439947          1)    (0.00653708          1)    (0.00389562          1)    (0.00529816          1)    (0.00505487          1)    (0.00570703          1)    (0.00367849          1)    (0.00367322          1)    (0.00349741          1)    (0.00543162          1)    (0.00424969          1)    (0.00395534          1)    ( 0.0052916          2)    ( 0.0051462          2)    (0.00550003          2)    (0.00499744          2)    (0.00661664          2)    (0.00409884          2)    (0.00313209          2)    (0.00445225          2)    (0.00723506          2)    (0.00375568          2)    ( 0.0040012          2)    (0.00482621          2)    (0.00612421          2)    (0.00652575          2)    (0.00627185          2)    (0.00588115          3)    (0.00398318          3)    (0.00370676          3)    (0.00792888          3)    (0.00540691          3)    (0.00352429          3)    (0.00386886          3)    ( 0.0036088          3)    (0.00435099          3)    (0.00505821          3)    (0.00553562          3)    (0.00409822          3)    (0.00441325          3)    (   0.00799          3)    (0.00362404          3);;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;  Question #3  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;(def n 36)(def advertise (+ 10 (* .25 (iseq n)) (* 7 (uniform-rand n))))(def season (repeat '(0 -.1 -.3 -.6 -.3 -.2 0 .5 1 .5 .3 .2) 3))(def sales (+ 25 (* .7 (iseq n))                 (* 18 season)                 (* .3 (normal-rand n))))              (plot-points advertise sales)(def r (regression-model advertise sales))(def res (send r :residuals))(plot-points (iseq n) res)(plot-points (butlast res) (rest res))(print-matrix (bind-columns sales advertise))     Sales    Advertise    (25.3774 12.4428)    (24.4023 14.5311)    (20.5278 16.5609)    (16.2495 17.1459)    (22.2619 14.6529)    (25.3681 12.7796)    (28.8615 16.3425)    (38.4694 13.7215)    (48.3832 16.6364)    (40.0528 12.7471)    (37.4447 14.5316)    ( 36.146 19.2255)    (33.3631 16.2861)    (32.3235 16.2466)    (29.3972 16.6342)    (24.4464 14.4282)    ( 30.338 15.6906)    (32.9497 15.0932)    (37.4815 20.2155)    (46.8876 18.8232)    (57.0042 16.2823)    (48.8252 20.2877)    (45.9891 21.8136)    (44.5178  16.623)    (42.0734 18.1018)    (40.8352 19.8959)    (37.8526 21.0406)    (33.3163  21.032)    (38.8964 18.3974)    (41.3573 23.0657)    (45.5463 18.1493)    (55.6658 19.1564)    (65.4644 21.6039)    (57.0853 24.9569)    ( 54.248 23.4725)    (53.4766 20.6838);;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;  Question #4  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;(def practice (repeat (combine (repeat 1 10) (repeat 2 10)) 3))(def location (combine (repeat 1 20) (repeat 2 20) (repeat 3 20)))(print-matrix (bind-columns practice location))   Practice  Location    (1 1)    (1 1)    (1 1)    (1 1)    (1 1)    (1 1)    (1 1)    (1 1)    (1 1)    (1 1)    (2 1)    (2 1)    (2 1)    (2 1)    (2 1)    (2 1)    (2 1)    (2 1)    (2 1)    (2 1)    (1 2)    (1 2)    (1 2)    (1 2)    (1 2)    (1 2)    (1 2)    (1 2)    (1 2)    (1 2)    (2 2)    (2 2)    (2 2)    (2 2)    (2 2)    (2 2)    (2 2)    (2 2)    (2 2)    (2 2)    (1 3)    (1 3)    (1 3)    (1 3)    (1 3)    (1 3)    (1 3)    (1 3)    (1 3)    (1 3)    (2 3)    (2 3)    (2 3)    (2 3)    (2 3)    (2 3)    (2 3)    (2 3)    (2 3)    (2 3);;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;  Question #5  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;